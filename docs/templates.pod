=pod

=encoding utf8

=head2 Templates

Page layout is handled using template files wherever possible.

=head2 About Tags

Template files are simply HTML files with special tags embedded in
them.  Mig expands these tags at runtime.

Tags are surrounded by C<%%> marks, such as this example:

    <title>%%pageTitle%%</title>

In this case, E<quot>pageTitleE<quot> is the relevant tag name.

There is a glossary of tags later in this document.

If you don't know anything about HTML you can try checking out
http://www.htmlhelp.com/ or looking for some other online help sites by
using a search engine such as Google [ http://www.google.com ].

Make backups of template files before modifying them in case things don't
work out as expected.

=head2 Including Files

An E<quot>includeE<quot> function is provided.  To include a file,
place a directive like this one on a line by itself:

    #include "filename";

Such as:

    #include "custom.html";

The contents of the specified file will be inserted in place of the
C<#include> placeholder.

If the file mentioned by C<#include> is a CGI file then it will be
executed, and its output will be placed there instead.  NOTE: CGI can only
be used with Apache servers (and not even every installation
of Apache will do this correctly).  Sorry, it's a limitation in PHP
that I can't work around.

If including a CGI make sure it prints appropriate HTTP headers
before anything else (just like any other situation where CGI is used).

Please note some things about C<#include>:

=over 4

=item 1.

Included files must be located in the F<templates> directory.

=item 2.

If that's undesirable, a symbolic link will also work.  For example:

    ln -s /www/htdocs/includes/custom.html /www/htdocs/mig/templates

This would create a symbolic link F</www/htdocs/mig/templates/custom.html>
which would point to the real file F</www/htdocs/includes/custom.html>.
Thus, there's only one copy to maintain.

=item 3.

The C<#include> directive must be on a line by itself.  It will not
function if anything else is on that line.  Also, the filename
must be in quotation marks, and the command must be terminated with
a semicolon.  Here are some examples:

    #include "custom.html";           # RIGHT
    #include "custom.html"            # WRONG - no semicolon
    #include custom.html;             # WRONG - no quotes
    <p>#include "custom.html";</p>    # WRONG - not alone on line

=item 4.

As of version 1.2.5 it is possible to include PHP files as well as other
types of files.  The one difference is that for PHP files the filename must
have an extension of either E<quot>.phpE<quot> or E<quot>.php3E<quot>.

=back

=head2 Special Files

There are three special files that Mig uses for its own purposes.

=over 4

=item *

F<templates/folder.html> - used for any view where folders and/or
thumbnail images are shown.

=item *

F<templates/image.html> - used for any view where an image is shown
by itself.

=item *

F<templates/style.css> - Contains C<text/css> (Cascading Style Sheet)
markup.

=back

If you are using PHP-Nuke, PostNuke, phpWebThings, PHPWebSite, XOOPS or
Geeklog these three files will not exist.  This is called
E<quot>PortalE<quot> mode.  In their place you'll find F<mig_folder.php>
and F<mig_image.php> which are the same basically as F<folder.html> and
F<image.html> respectively.  In Portal mode the CSS file is not used (Portal
systems usually have their own CSS definitions).  See the F<portal>
document for more about how to properly install things in Portal mode.

=head2 Defined Tags

The following is a glossary of recognized Mig template tags, and what they
are expanded to.

=over 4

=item 1.

Tags for use in any template

=over 4

=item baseURL

URL to call this script (Mig) again.

=item maintAddr

Email address of album maintainer (as defined in F<config.php>).
This can be customized per-folder using a F<mig.cf> file.

=item version

Version number of this Mig installation.

=item backLink

This is the E<quot>up one levelE<quot> link on each page.

=item currDir

Current directory, in URL-encoded format.

=item newCurrDir

Same as E<quot>currDirE<quot> with leading E<quot>./E<quot> removed.

=item pageTitle

E<lt>TITLEE<gt> tag for this page.

=item youAreHere

This is the E<quot>you are hereE<quot> path at the top of each page.

=item distURL

URL of Mig home page

=item description

Description of the image, taken from the comments file(s).  For folders,
this is E<lt>BulletinE<gt>.

=item newLang

Lets you switch from one language to another.  For example, if your default
language is English (en) but you choose to publish also in Spanish and
Italian, you can add links like these to your template files:

    <a href="%%newLang%%=es">Espanol</a>

    <a href="%%newLang%%=it">Italiano</a>

Then, anyone visiting your pages would be given a default page in English
(or whatever C<$mig_language> is set to in F<config.php>) but clicking on
the links as shown above would tell Mig to switch over to the new language
(in this case either Spanish or Italian).

You can also link directly to a version of your site before the visitor
ever gets there (so they don't have to get English first, then switch).  To
directly link you'd add a "mig_dl=LANG" parameter to your URL.  So if your
usual link looks like this:

    http://my.gallery.com/mig/index.php

You'd instead use this:

    http://my.gallery.com/mig/index.php?mig_dl=es

Or you can link even if there are already parameters in the URL; just use
an & instead of ?

    http://my.gallery.com/mig/index.php?currDir=./My_Stuff&mig_dl=es

=back

=item 2.

Tags used only in F<folder.html> (or F<mig_folder.php> in Portal mode)

=over 4

=item folderList

Expands to a section of E<lt>TABLEE<gt> code which
displays a list of folders in the current folder.

=item imageList

Expands to a section of E<lt>TABLEE<gt> code which
displays a list of images in the current folder.

=back

=item 3.

Tags used only in F<image.html> (or F<mig_image.php> in Portal mode)

=over 4

=item image

The current image being shown.

=item albumURLroot

Root URL of the actual album where images live
(used in E<lt>IMG SRC=E<quot>...E<quot>E<gt> HTML tags).

=item nextLink

A link to the next item in the sequence.

=item prevLink

A link to the previous item in the sequence.

=item currPos

Current position in the list (i.e. #5 of 7)

=item encodedImageURL

Image filename run through rawurlencode() in case
there's a space embedded in it or something.

=item imageSize

HTML that gives WIDTH=nnn and HEIGHT=nnn tags
for the image being displayed.

=item largeLink

Expands to a navigation link pointing to the large version of an image when
using large-image support

=item largeHrefStart

Expands to an E<lt>a hrefE<gt> surrounding a medium size image when using
large-image support

=item largeHrefEnd

Expands to E<lt>/aE<gt> when using large-image support

=item largeLinkBorder

Used to turn borders on or off in accordance with C<$largeLinkUseBorders>

=back

=back

=head2 Custom Per-folder Templates

If desired, one can define a per-folder template file.  This can be done
with the C<FolderTemplate> entity, as discussed in the E<quot>mig_cfE<quot>
document.

=head2 Managing Colors

Mig uses a Cascading Style Sheet (CSS) file to manage all of its element
colorization.  Things like the page background, background colors for table
cells, all are managed by the CSS file F<templates/style.css>.

I don't have the inclination or time to write a tutorial on how CSS works,
so please see http://www.htmlhelp.com/reference/css/ or whatever else you
come across to figure out how CSS works.  There are some books on this
topic available as well (try searching for E<quot>CSSE<quot> at Amazon.com).
A basic example follows, though.

To change background color of description tables from C<#f0f0f0> (grey)
to C<#FF0000> (red):

    Before:
        TD.desc {
            color: #333333;          padding-top: 4px;
            background: #f0f0f0;     padding-bottom: 3px;
            font-size: .9em;         padding-left: 4px;
            text-align: center;      padding-right: 6px;
        }

    After:
        TD.desc {
            color: #333333;          padding-top: 4px;
            background: #ff0000;     padding-bottom: 3px;
            font-size: .9em;         padding-left: 4px;
            text-align: center;      padding-right: 6px;
        }

In this example, only the third line (background) was changed.

=cut

